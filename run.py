#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
1C Help Parser - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
import argparse
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import bs4
        print("‚úÖ BeautifulSoup4 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå BeautifulSoup4 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install beautifulsoup4")
        return False
    
    try:
        import lxml
        print("‚úÖ lxml —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  lxml –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install lxml")
    
    return True

def cleanup_data():
    """–û—á–∏—â–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data"""
    import glob
    
    files_to_remove = [
        "data/1c_summary.json",
        "data/context_chunks/",
        "data/hbk_analysis.json"
    ]
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    for pattern in files_to_remove:
        if pattern.endswith('/'):
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
            if os.path.exists(pattern):
                import shutil
                shutil.rmtree(pattern)
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {pattern}")
        else:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            if os.path.exists(pattern):
                os.remove(pattern)
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {pattern}")
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def run_parser(zip_file, max_files=500, use_improved=True):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {zip_file}")
    os.system(f"set PYTHONPATH=src && python src/parsers/hbk_parser.py {zip_file}")
    
    print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {zip_file}")
    os.system(f"set PYTHONPATH=src && python src/parsers/bsl_syntax_extractor.py {zip_file} --max-files {max_files}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è JSON —Ñ–∞–π–ª–∞
    base_name = Path(zip_file).stem
    json_file = f"data/bsl_syntax_{base_name}.json" if "root" in base_name else "data/bsl_syntax.json"
    md_file = json_file.replace('.json', '.md')
    
    if os.path.exists(json_file):
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {json_file}")
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: JSON, TXT –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        os.system(f"set PYTHONPATH=src && python src/converters/context_converter.py {json_file} json,txt,search_index")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        if os.path.exists(json_file):
            os.remove(json_file)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª: {json_file}")
        if os.path.exists(md_file):
            os.remove(md_file)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª: {md_file}")
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def run_demo(context_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    if "optimized" in context_file:
        print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–∏—Å–∫–∞...")
        os.system(f"set PYTHONPATH=src && python src/demos/optimized_demo.py {context_file} --examples")
    elif "root" in context_file:
        print("üåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)")
        os.system(f"set PYTHONPATH=src && python src/demos/test_root_demo.py {context_file}")
    else:
        print("üá∑üá∫ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ä—É—Å—Å–∫–∏–π)")
        os.system(f"set PYTHONPATH=src && python src/demos/llm_context_demo.py {context_file}")

def main():
    parser = argparse.ArgumentParser(description="1C Help Parser - –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 1–°")
    parser.add_argument("--file", "-f", help="–ü—É—Ç—å –∫ ZIP —Ñ–∞–π–ª—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
    parser.add_argument("--demo", "-d", help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    parser.add_argument("--check", "-c", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--auto", action="store_true", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
    parser.add_argument("--basic", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞")
    
    args = parser.parse_args()
    
    print("üîß 1C Help Parser")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if args.check:
        check_dependencies()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if args.file:
        if not os.path.exists(args.file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
            return
        
        use_improved = not args.basic
        run_parser(args.file, use_improved=use_improved)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    elif args.demo:
        if not os.path.exists(args.demo):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.demo}")
            return
        
        run_demo(args.demo)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    elif args.auto:
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        run_parser("data/rebuilt.shcntx_ru.zip")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        check_dependencies()
        
        print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (shcntx_ru.zip)")
        print("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("4. –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-4): ").strip()
        
        if choice == "1":
            run_parser("data/rebuilt.shcntx_ru.zip")
        elif choice == "2":
            run_demo("data/1c_context_optimized.json")
        elif choice == "3":
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—ã—à–µ")
        elif choice == "4":
            cleanup_data()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 