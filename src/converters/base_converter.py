#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤ 1C Help Parser
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""

import json
import os
import sys
import re
from typing import Dict, List, Any, Optional
from abc import ABC, abstractmethod
from datetime import datetime

class BaseConverter(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤"""
    
    def __init__(self, input_file: str, verbose: bool = False):
        self.input_file = input_file
        self.data = {}
        self.verbose = verbose
        self.exported_files = []  # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ª–æ–≥–æ–≤
    
    def load_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.input_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        
        return text
    
    def ensure_directory(self, filepath: str) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        directory = os.path.dirname(filepath)
        if directory and not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
    
    def export_json(self, data: Dict[str, Any], filename: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            self.ensure_directory(filename)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            self.exported_files.append(filename)
            
            # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.verbose:
                print(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {e}")
    
    def export_text(self, data: str, filename: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        try:
            self.ensure_directory(filename)
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            self.exported_files.append(filename)
            
            # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.verbose:
                print(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ —Ç–µ–∫—Å—Ç: {e}")
    
    def show_export_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.exported_files:
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for filename in self.exported_files:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—É—Ç–∏
            parts = filename.split(os.sep)
            if len(parts) >= 2:
                category = parts[-2]  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏
            else:
                category = "other"
            
            if category not in categories:
                categories[category] = []
            categories[category].append(filename)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.exported_files)}")
        for category, files in sorted(categories.items()):
            print(f"   üìÇ {category}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–∞–ª—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if len(files) <= 3:
                for file in files:
                    filename = os.path.basename(file)
                    print(f"      {filename}")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
                for file in files[:2]:
                    filename = os.path.basename(file)
                    print(f"      {filename}")
                if len(files) > 4:
                    print(f"      ... ({len(files)-4} —Ñ–∞–π–ª–æ–≤) ...")
                for file in files[-2:]:
                    filename = os.path.basename(file)
                    print(f"      {filename}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.exported_files = []
    
    def create_search_index(self, items: List[Dict[str, Any]]) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        search_index = {}
        
        for item in items:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            title = item.get('title', '').lower()
            content = item.get('content', '').lower()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            words = re.findall(r'\b\w+\b', f"{title} {content}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å
            for word in words:
                if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    if word not in search_index:
                        search_index[word] = []
                    if item.get('id') not in search_index[word]:
                        search_index[word].append(item.get('id'))
        
        return search_index
    
    @abstractmethod
    def convert(self) -> None:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass 