#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —Ä–∞–∑–±–∏—Ç–æ–º –≤–∏–¥–µ
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
"""

import os
import sys
from typing import Dict, List, Any
from .split_converter import SplitConverter

class OptimizedSplitConverter(SplitConverter):
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —Ä–∞–∑–±–∏—Ç–æ–º –≤–∏–¥–µ"""
    
    def convert(self) -> None:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–±–∏—Ç–æ–º –≤–∏–¥–µ"""
        if not self.load_data():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        output_dir = "data/optimized_split"
        os.makedirs(output_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        all_items = self.data.get("context_items", [])
        optimized_items = self.optimize_data(all_items)
        
        print(f"üìä –†–∞–∑–±–∏–≤–∞–µ–º {len(optimized_items)} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ñ–∞–π–ª—ã...")
        print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: max_file_size_kb={self.max_file_size_kb}, max_items_per_file={self.max_items_per_file}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–±–∏—Ç–æ–º –≤–∏–¥–µ
        self.export_split(optimized_items, output_dir, "optimized")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å
        self.create_main_index(output_dir, optimized_items, "optimized_split")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        self.validate_export(output_dir)
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–∏—Ç—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_dir}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics(output_dir, optimized_items, all_items)
    
    def optimize_data(self, items: List[Dict]) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–∞–∫ –≤ OptimizedContextConverter"""
        print(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—ã—Å–æ–∫–∏–π -> –Ω–∏–∑–∫–∏–π)
        priorities = {
            'methods': 1,
            'functions': 2, 
            'operators': 3,
            'objects': 4,
            'properties': 5
        }
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        limits = {
            'methods': 200,
            'functions': 300,
            'operators': 50,
            'objects': 500,
            'properties': 200
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        sorted_items = self._sort_by_importance(items)
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ª–∏–º–∏—Ç–∞–º
        selected_items = []
        category_counts = {}
        
        for item in sorted_items:
            category = item.get('category', 'other')
            if category not in category_counts:
                category_counts[category] = 0
            
            if category_counts[category] < limits.get(category, 100):
                selected_items.append(item)
                category_counts[category] += 1
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –≤—ã–±—Ä–∞–Ω–æ {len(selected_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        for category, count in category_counts.items():
            print(f"   {category}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return selected_items
    
    def _sort_by_importance(self, items: List[Dict]) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        def score_item(item):
            score = 0
            metadata = item.get('metadata', {})
            
            # –ú–µ—Ç–æ–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–∂–Ω–µ–µ
            if item.get('category') in ['methods', 'functions']:
                score += 100
            
            # –ù–∞–ª–∏—á–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            if metadata.get('syntax') or metadata.get('syntax_variants'):
                score += 50
            
            # –ù–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if metadata.get('parameters') or metadata.get('parameters_by_variant'):
                score += 30
            
            # –ù–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
            if metadata.get('example'):
                score += 20
            
            # –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
            if metadata.get('methods'):
                score += len(metadata['methods']) * 10
            
            # –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            content = item.get('content', '')
            if len(content) > 50:
                score += 10
            
            return score
        
        return sorted(items, key=score_item, reverse=True)
    
    def show_statistics(self, output_dir: str, optimized_items: List[Dict], all_items: List[Dict]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        categories = self.split_by_category(optimized_items)
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_items)}")
        print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(optimized_items)}")
        print(f"   –°–∂–∞—Ç–∏–µ: {len(optimized_items)/len(all_items)*100:.1f}%")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        total_files = 0
        for category, items in categories.items():
            chunks = self.split_into_chunks(items)
            total_files += len(chunks)
            print(f"   {category}: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Üí {len(chunks)} —Ñ–∞–π–ª–æ–≤")
        
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}") 