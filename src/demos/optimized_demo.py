#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è 1–° Help Parser
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –ø–æ–ª—è–º
"""

import json
import sys
import re
from typing import List, Dict, Any


class OptimizedContextDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, context_file: str):
        self.context_file = context_file
        self.context_data = None
        self.search_index = None
        
    def load_context(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        try:
            with open(self.context_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.context_data = data.get('items', [])
            self.search_index = data.get('search', {})
            
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
            print(f"- –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(self.context_data)}")
            print(f"- –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–π: {len(self.search_index)}")
            print(f"- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(json.dumps(data, ensure_ascii=False)) / 1024:.1f}KB")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def search_by_keyword(self, keyword: str, max_results: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        keyword_lower = keyword.lower()
        results = []
        
        # –ü–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ
        if keyword_lower in self.search_index:
            item_ids = self.search_index[keyword_lower]
            
            for item_id in item_ids[:max_results]:
                item = self.find_item_by_id(item_id)
                if item:
                    results.append(item)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–Ω–¥–µ–∫—Å–µ, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if not results:
            for item in self.context_data:
                search_text = f"{item['title']} {item.get('description', '')}".lower()
                if keyword_lower in search_text:
                    results.append(item)
                    if len(results) >= max_results:
                        break
        
        return results
    
    def search_by_availability(self, availability: str, max_results: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        availability_lower = availability.lower()
        results = []
        
        for item in self.context_data:
            item_availability = [av.lower() for av in item.get('availability', [])]
            if availability_lower in item_availability:
                results.append(item)
                if len(results) >= max_results:
                    break
        
        return results
    
    def search_by_version(self, version: str, max_results: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –≤–µ—Ä—Å–∏–∏"""
        results = []
        
        for item in self.context_data:
            item_version = item.get('version', '')
            if version in item_version:
                results.append(item)
                if len(results) >= max_results:
                    break
        
        return results
    
    def search_by_category(self, category: str, max_results: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_lower = category.lower()
        results = []
        
        for item in self.context_data:
            item_category = item.get('category', '').lower()
            if category_lower == item_category:
                results.append(item)
                if len(results) >= max_results:
                    break
        
        return results
    
    def find_item_by_id(self, item_id: str) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID"""
        for item in self.context_data:
            if item.get('id') == item_id:
                return item
        return None
    
    def display_item(self, item: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print(f"\n{'='*80}")
        print(f"üìÑ {item['title']}")
        print(f"{'='*80}")
        
        if item.get('syntax'):
            print(f"üîß –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {item['syntax']}")
        
        if item.get('description'):
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}")
        
        if item.get('parameters'):
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            for param in item['parameters']:
                required = "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" if param.get('required', True) else "–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
                print(f"  - {param['name']} ({param['type']}) - {required}")
        
        if item.get('return_value'):
            print(f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {item['return_value']}")
        
        if item.get('availability'):
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {', '.join(item['availability'])}")
        
        if item.get('version'):
            print(f"üìÖ –í–µ—Ä—Å–∏—è: {item['version']}")
        
        print(f"üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    def display_search_results(self, results: List[Dict[str, Any]], query: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        if not results:
            print(f"\n‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':")
        
        for i, item in enumerate(results, 1):
            print(f"\n{i}. {item['title']}")
            if item.get('description'):
                print(f"   {item['description'][:100]}...")
            if item.get('availability'):
                print(f"   –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {', '.join(item['availability'])}")
    
    def interactive_search(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"""
        print("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞:")
        print("1. –ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ñ–æ—Ä–º–∞', '—Ü–∏–∫–ª')")
        print("2. –ü–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–µ—Ä–≤–µ—Ä', '–∫–ª–∏–µ–Ω—Ç')")
        print("3. –ü–æ –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '8.2')")
        print("4. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'operators', 'methods')")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID")
        print("0. –í—ã—Ö–æ–¥")
        
        while True:
            try:
                query = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
                
                if query == '0':
                    break
                
                if not query:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
                if query.lower() in ['—Å–µ—Ä–≤–µ—Ä', '–∫–ª–∏–µ–Ω—Ç', '–º–æ–±–∏–ª—å–Ω—ã–π', '–≤–µ–±-–∫–ª–∏–µ–Ω—Ç']:
                    results = self.search_by_availability(query)
                    self.display_search_results(results, f"–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {query}")
                
                elif re.match(r'\d+\.\d+', query):
                    results = self.search_by_version(query)
                    self.display_search_results(results, f"–≤–µ—Ä—Å–∏—è: {query}")
                
                elif query.lower() in ['operators', 'methods', 'objects', 'properties', 'functions']:
                    results = self.search_by_category(query)
                    self.display_search_results(results, f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {query}")
                
                elif query.startswith('id:'):
                    item_id = query[3:].strip()
                    item = self.find_item_by_id(item_id)
                    if item:
                        self.display_item(item)
                    else:
                        print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID '{item_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                else:
                    results = self.search_by_keyword(query)
                    self.display_search_results(results, query)
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if results and len(results) > 0:
                    show_details = input(f"\nüìñ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞? (y/n): ").strip().lower()
                    if show_details == 'y':
                        self.display_item(results[0])
                
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
    parser.add_argument('context_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1c_context_optimized.json')
    parser.add_argument('--examples', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞')
    
    args = parser.parse_args()
    context_file = args.context_file
    
    if not os.path.exists(context_file):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {context_file}")
        sys.exit(1)
    
    demo = OptimizedContextDemo(context_file)
    
    if not demo.load_context():
        sys.exit(1)
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
    print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    results = demo.search_by_keyword("—Ñ–æ—Ä–º–∞", 3)
    demo.display_search_results(results, "—Ñ–æ—Ä–º–∞")
    
    # –ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    results = demo.search_by_availability("—Å–µ—Ä–≤–µ—Ä", 3)
    demo.display_search_results(results, "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: —Å–µ—Ä–≤–µ—Ä")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    results = demo.search_by_category("operators", 3)
    demo.display_search_results(results, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è: operators")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --examples)
    if not args.examples:
        demo.interactive_search()
    else:
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python src/demos/optimized_demo.py {context_file}")


if __name__ == "__main__":
    import os
    main() 