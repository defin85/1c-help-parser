#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- –ü–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –î–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
- –¢–æ—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
"""

import json
import sys
import argparse
from typing import Dict, List, Any

class ImprovedDemo:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, context_file: str):
        self.context_file = context_file
        self.context_data = []
        self.search_index = {}
        
    def load_context(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.context_file, 'r', encoding='utf-8') as f:
                self.context_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.context_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def load_search_index(self, index_file: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"""
        try:
            with open(index_file, 'r', encoding='utf-8') as f:
                self.search_index = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å {len(self.search_index)} –∫–ª—é—á–∞–º–∏")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {e}")
            return False
    
    def search_by_keyword(self, keyword: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        results = []
        keyword_lower = keyword.lower()
        
        for item in self.context_data:
            if (keyword_lower in item['title'].lower() or 
                keyword_lower in item['description'].lower() or
                keyword_lower in item['syntax'].lower()):
                results.append(item)
        
        return results
    
    def search_by_availability(self, availability: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        results = []
        availability_lower = availability.lower()
        
        for item in self.context_data:
            for item_availability in item.get('availability', []):
                if availability_lower in item_availability.lower():
                    results.append(item)
                    break
        
        return results
    
    def search_by_category(self, category: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        results = []
        category_lower = category.lower()
        
        for item in self.context_data:
            if category_lower in item['category'].lower():
                results.append(item)
        
        return results
    
    def search_by_version(self, version: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –≤–µ—Ä—Å–∏–∏"""
        results = []
        
        for item in self.context_data:
            if item.get('version') and version in item['version']:
                results.append(item)
        
        return results
    
    def show_item_details(self, item: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ"""
        print(f"\n{'='*80}")
        print(f"üìã {item['title']}")
        print(f"{'='*80}")
        
        print(f"üìù **–°–∏–Ω—Ç–∞–∫—Å–∏—Å:** {item['syntax']}")
        print(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {item['description']}")
        print(f"üè∑Ô∏è  **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {item['category']}")
        
        if item.get('availability'):
            print(f"üåê **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:** {', '.join(item['availability'])}")
        
        if item.get('version'):
            print(f"üìÖ **–í–µ—Ä—Å–∏—è:** {item['version']}")
        
        if item.get('syntax_variants'):
            print(f"\nüîÑ **–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:**")
            for i, variant in enumerate(item['syntax_variants'], 1):
                print(f"  {i}. **{variant['variant_name']}**: `{variant['syntax']}`")
                
                if variant['parameters']:
                    print(f"     **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                    for param in variant['parameters']:
                        optional = "(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" if param.get('optional') else "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
                        print(f"     - `{param['name']}` {optional}: {param.get('type', '')}")
                        if param.get('description'):
                            print(f"       {param['description']}")
        
        if item.get('return_value'):
            print(f"\n‚Ü©Ô∏è  **–í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {item['return_value']}")
        
        if item.get('example'):
            print(f"\nüí° **–ü—Ä–∏–º–µ—Ä:** {item['example']}")
        
        print(f"{'='*80}")
    
    def compare_with_original(self, item: Dict[str, Any]) -> None:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"""
        print(f"\nüîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º:**")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        if item.get('syntax_variants') and len(item['syntax_variants']) > 1:
            print(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {len(item['syntax_variants'])} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        else:
            print(f"‚ö†Ô∏è  –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        has_param_descriptions = False
        for variant in item.get('syntax_variants', []):
            for param in variant.get('parameters', []):
                if param.get('description'):
                    has_param_descriptions = True
                    break
        
        if has_param_descriptions:
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"‚ö†Ô∏è  –û–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if item.get('availability') and len(item['availability']) > 2:
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {len(item['availability'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"‚ö†Ô∏è  –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏
        if item.get('version') and '8.' in item['version']:
            print(f"‚úÖ –¢–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏: {item['version']}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ—Ç–æ—á–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏")
    
    def run_examples(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞"""
        print("\nüöÄ **–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:**")
        
        # –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞ "–£–¥–∞–ª–∏—Ç—å"
        print(f"\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞ '–£–¥–∞–ª–∏—Ç—å':")
        delete_results = self.search_by_keyword("–£–¥–∞–ª–∏—Ç—å")
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(delete_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if delete_results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_result = delete_results[0]
            print(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {first_result['title']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            self.show_item_details(first_result)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            self.compare_with_original(first_result)
        
        # –ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ "—Å–µ—Ä–≤–µ—Ä"
        print(f"\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ '—Å–µ—Ä–≤–µ—Ä':")
        server_results = self.search_by_availability("—Å–µ—Ä–≤–µ—Ä")
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(server_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if server_results:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join([r['title'] for r in server_results[:3]])}")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "methods"
        print(f"\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'methods':")
        method_results = self.search_by_category("methods")
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(method_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if method_results:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join([r['title'] for r in method_results[:3]])}")
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤–µ—Ä—Å–∏–∏ "8.2"
        print(f"\n4Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –≤–µ—Ä—Å–∏–∏ '8.2':")
        version_results = self.search_by_version("8.2")
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(version_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if version_results:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join([r['title'] for r in version_results[:3]])}")
    
    def interactive_search(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"""
        print(f"\nüîç **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫:**")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print(f"  keyword <—Å–ª–æ–≤–æ> - –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print(f"  availability <–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å> - –ø–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
        print(f"  category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print(f"  version <–≤–µ—Ä—Å–∏—è> - –ø–æ–∏—Å–∫ –ø–æ –≤–µ—Ä—Å–∏–∏")
        print(f"  quit - –≤—ã—Ö–æ–¥")
        
        while True:
            try:
                command = input(f"\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
                
                if command.lower() == 'quit':
                    break
                
                parts = command.split(' ', 1)
                if len(parts) != 2:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                    continue
                
                cmd_type, query = parts
                
                if cmd_type.lower() == 'keyword':
                    results = self.search_by_keyword(query)
                    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if results:
                        self.show_item_details(results[0])
                
                elif cmd_type.lower() == 'availability':
                    results = self.search_by_availability(query)
                    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if results:
                        self.show_item_details(results[0])
                
                elif cmd_type.lower() == 'category':
                    results = self.search_by_category(query)
                    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if results:
                        self.show_item_details(results[0])
                
                elif cmd_type.lower() == 'version':
                    results = self.search_by_version(query)
                    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if results:
                        self.show_item_details(results[0])
                
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd_type}")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_statistics(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(self.context_data)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in self.context_data:
            category = item['category']
            categories[category] = categories.get(category, 0) + 1
        
        print(f"–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in sorted(categories.items()):
            print(f"  {category}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        with_variants = sum(1 for item in self.context_data if item.get('syntax_variants'))
        without_variants = len(self.context_data) - with_variants
        
        print(f"–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
        print(f"  –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: {with_variants}")
        print(f"  –ë–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {without_variants}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        availability_stats = {}
        for item in self.context_data:
            for availability in item.get('availability', []):
                availability_stats[availability] = availability_stats.get(availability, 0) + 1
        
        print(f"–ü–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Ç–æ–ø-5):")
        sorted_availability = sorted(availability_stats.items(), key=lambda x: x[1], reverse=True)
        for availability, count in sorted_availability[:5]:
            print(f"  {availability}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä—Å–∏—è–º
        version_stats = {}
        for item in self.context_data:
            if item.get('version'):
                version_stats[item['version']] = version_stats.get(item['version'], 0) + 1
        
        print(f"–ü–æ –≤–µ—Ä—Å–∏—è–º:")
        for version, count in sorted(version_stats.items()):
            print(f"  {version}: {count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞')
    parser.add_argument('context_file', help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º')
    parser.add_argument('--index', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞')
    parser.add_argument('--examples', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã')
    parser.add_argument('--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    args = parser.parse_args()
    
    if not args.context_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        sys.exit(1)
    
    demo = ImprovedDemo(args.context_file)
    
    if not demo.load_context():
        sys.exit(1)
    
    if args.index:
        demo.load_search_index(args.index)
    
    print(f"üîß –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    print(f"üìÅ –§–∞–π–ª: {args.context_file}")
    
    if args.examples:
        demo.run_examples()
    
    if args.stats:
        demo.show_statistics()
    
    if args.interactive:
        demo.interactive_search()
    
    if not any([args.examples, args.interactive, args.stats]):
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–º–µ—Ä—ã
        demo.show_statistics()
        demo.run_examples()

if __name__ == "__main__":
    main() 